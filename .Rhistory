summary(training)
summary(testing)
# Packages
install.packages('caret')
install.packages('kernlab')
install.packages('randomForest')
install.packages('corrplot')
library(caret)
library(kernlab)
library(randomForest)
library(corrplot)
# load data
training <- read.csv("pml-training.csv", na.strings= c("NA",""," "))
testing <- read.csv("pml-testing.csv", na.strings= c("NA",""," "))
summary(training)
summary(testing)
str(training)
training$classe
str(training)
?training
summary(training)
dim(summary)
dim(summary)[2]
dim(training)
set.seed(32323)
folds <- createFolds(y=training$classe, k=10, list=TRUE, returnTrain=TRUE)
sapply(folds, length)
17660 * 10
19622 - 17660
set.seed(32323)
foldsTrain <- createFolds(y=training$classe, k=10, list=TRUE, returnTrain=TRUE)
sapply(foldsTrain, length)
foldsTest <- createFolds(y=training$classe, k=10, list=TRUE, returnTrain=FALSE)
sapply(foldsTest, length)
sapply(foldsTrain, length)
sapply(foldsTest, length)
17660 + 1962
1962 / 17660 + 1962
1962 / (17660 + 1962)
set.seed(32343)
modelFit <- train(classe ~., data=training, method="glm") # try with other method that 'gml'
modelFit$finalModel
summary(training)
set.seed(32343)
modelFit <- train(classe ~., data=training, method="glm") # try with other method that 'gml'
modelFit$finalModel
install.packages('ISLR')
library(ISLR)
install.packages('ggplot2')
install.packages("ggplot2")
library(ggplot2)
featurePlot (x=training, y=training$classe, plots=pairs)
library(ISLR)
library(ggplot2)
featurePlot (x=training, y=training$classe, plots="pairs)
summary(testing)
